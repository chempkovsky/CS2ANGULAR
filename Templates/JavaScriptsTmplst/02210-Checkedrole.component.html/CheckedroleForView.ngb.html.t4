<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2ANGULAR" #>
<#@ import namespace="CS2ANGULAR.Model" #>
<#@ import namespace="CS2ANGULAR.Model.Serializable" #>
<#@ parameter type="CS2ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>

<#
    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";
    int percentEq100 = 99;

    string DisplayedColumnsProperty        = "displayedColumns";
    string ActionColumnDefProperty         = "menuAction";
    string SelectColumnDefProperty         = "selectAction";
    string OnSelectRowMethodName           = "onSelectRow";
    string MatPaginatorLen                 = "matPaginatorLen";
    string MatPaginatorPageSize            = "matPaginatorPageSize";
    string MatPaginatorPageSizeOptions     = "matPaginatorPageSizeOptions"; 
    
    string EformModeSelector                = "eform-mode";
    string EformModePropName                = "eformMode";
    string FormControlModelSelector         = "eform-control-model";
    string FormControlModelPropName         = "eformControlModel";
    string FormControlNewModelPropName      = "eformNewControlModel";



    string DisplayLabelProperty             = "Name";
    string DisplayHintProperty              = "Prompt";

    string MainFormGroupName        = "mainFormGroup";
    string ComboSufix               = "CmbCntrl";
    string TypeaheadSufix           = "TphdCntrl";
    string TypeaheadDisplaySufix    = "DsplFn";
    string TypeaheadAddDisplaySufix = "AddDsplFn";
    string TypeaheadUpdDisplaySufix = "UpdDsplFn";
    string TypeaheadDelDisplaySufix = "DelDsplFn";
    string SearchClickSufix         = "SrchClck";
    string AppearancePropName       = "appearance";

    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";
    string showAddFltItemSelector   = "show-add-flt-item";
    string showAddFltItemPropName   = "showAddFltItem";
    

    string SelectedRowSelector      = "selected-row";
    string SelectedRowPropName      = "selectedRow";

    string CanAddDetailSelector         = "can-detail-add";
    string CanAddDetailPropName         = "canDetailAdd";
    string CanUpdDetailSelector         = "can-detail-update";
    string CanUpdDetailPropName         = "canDetailUpdate";
    string CanDelDetailSelector         = "can-detail-delete";
    string CanDelDetailPropName         = "canDetailDelete";
    string HiddenFilterDetailSelector   = "hidden-detail-filter";
    string HiddenFilterDetailPropName   = "hiddenDetailFilter";
    string ShowFilterDetailSelector     = "show-detail-filter";
    string ShowFilterDetailPropName     = "showDetailFilter";
    string SelectedRowDetailSelector    = "selected-detail-row";
    string SelectedRowDetailPropName    = "selectedDetailRow";
    string DetailViewNameSelector       = "detail-view-name";
    string DetailViewNamePropName       = "detailViewName";
    string DetailViewSelModels          = "detailViewSelModels";
    string SelectedDetailCaptionSelector= "selected-detail-caption";
    string SelectedDetailCaptionPropName= "selectedDetailCaption";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";
    string saveRolePropName                     = "saveRole";
    string onSaveRoleMethodName                 = "onSaveRole";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string viewInterfaceFolder      = "01100-.interface.ts";
    string viewInterfacePageFolder  = "01200-Page.interface.ts";
    string viewInterfaceFltFolder   = "01300-Filter.interface.ts";
    string viewServiceFolder        = "01400-.service.ts";

    string eformCssFolder           = "01500-Eform.component.css";
    string eformHtmlFolder          = "01500-Eform.component.html";
    string eformComponentFolder     = "01500-Eform.component.ts";

    string lformCssFolder           = "01600-Lform.component.css";
    string lformHtmlFolder          = "01600-Lform.component.html";
    string lformComponentFolder     = "01600-Lform.component.ts";

    string checkedmodelComponentCssFolder       = "02200-Checkedmodel.component.css";
    string checkedmodelComponentHtmlFolder      = "02200-Checkedmodel.component.html";
    string checkedmodelComponentFolder          = "02200-Checkedmodel.component.ts";

    string checkedDashboardComponentCssFolder   = "02205-Checkeddashboard.component.css";
    string checkedDashboardComponentHtmlFolder  = "02205-Checkeddashboard.component.html";
    string checkedDashboardComponentFolder      = "02205-Checkeddashboard.component.ts";

    string checkedroleComponentCssFolder        = "02210-Checkedrole.component.css";
    string checkedroleComponentHtmlFolder       = "02210-Checkedrole.component.html";
    string checkedroleComponentFolder           = "02210-Checkedrole.component.ts";

    ModelViewSerializable checkedmodel          =  GetFirstModelViewByType(Context, checkedmodelComponentFolder);
    ModelViewSerializable checkeddashmodel      =  GetFirstModelViewByType(Context, checkedDashboardComponentFolder);

    string lformSelectorCommonPart              = GetComponentSelectorCommonPart(Model, lformComponentFolder);
    string eformSelectorCommonPart              = GetComponentSelectorCommonPart(Model, eformComponentFolder);
    string checkedmodelSelectorCommonPart       = GetComponentSelectorCommonPart(checkedmodel, checkedmodelComponentFolder);
    string checkeddashboardSelectorCommonPart   = GetComponentSelectorCommonPart(checkeddashmodel, checkedDashboardComponentFolder);
    
    string PermissionsSelector                  = "permissions";
    string PermissionsPropName                  = "permissions";
    string OutPermissionSelector                = "out-permission";
    string OutPermissionPropName                = "outPermission";

#>
<div class="card">
    <app-<#= lformSelectorCommonPart #> 
        (<#= SelectedRowSelector #>)="onSelectedRow($event)"
        [<#= HiddenFilterSelector #>] = "<#= HiddenFilterPropName #>" 
        [<#= ShowFilterSelector #>]="<#= ShowFilterPropName #>"
        [<#= showAddFltItemSelector #>]="<#= showAddFltItemPropName #>"
        [<#= CanAddSelector #>]= "<#= CanAddPropName #>" 
        [<#= CanUpdSelector #>]= "<#= CanUpdPropName #>" 
        [<#= CanDelSelector #>]= "<#= CanDelPropName #>"
        [<#= containerMenuItemsSelector #>]="<#= containerMenuItemsPropName #>"
        (<#= onContainerMenuItemClickSelector #>)="<#= onContainerMenuItemClickMethodName #>($event)"
        [<#= MaxHeightPropSelector #>]="<#= MaxHeightPropName #>"  
        [<#= FilterMaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
    ></app-<#= lformSelectorCommonPart #>>

    <div class="btn btn-sm btn-primary" (click)="isBmskCollapsed = !isBmskCollapsed" [attr.aria-expanded]="!isBmskCollapsed" aria-controls="bitmaskdetailform">Role details</div>

    <div id="bitmaskdetailform"   [ngbCollapse]="isBmskCollapsed">
        <app-<#= eformSelectorCommonPart #> 
            [<#= EformModeSelector #>] = '<#= EformModePropName #>'
            [<#= FormControlModelSelector #>] = '<#= FormControlModelPropName #>'
        ></app-<#= eformSelectorCommonPart #>>
    </div>



    <ul ngbNav #nav="ngbNav" class="nav-tabs">
      <li ngbNavItem>
        <a ngbNavLink>Models</a>
        <ng-template ngbNavContent>


            <app-<#= checkedmodelSelectorCommonPart #> 
                [<#= MaxHeightPropSelector #>]="<#= MaxHeightPropName #>"  
                [<#= FilterMaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
                [<#= ShowFilterSelector #>]="<#= ShowFilterPropName #>"
                [<#= showAddFltItemSelector #>]="<#= showAddFltItemPropName #>"

                [<#= PermissionsSelector #>]="<#= PermissionsPropName #>"
                (<#= OutPermissionSelector #>)="<#= OutPermissionPropName #>($event)"
                [<#= containerMenuItemsSelector #>]="<#= saveRolePropName #>"
                (<#= onContainerMenuItemClickSelector #>)="<#= onSaveRoleMethodName #>($event)"
            ></app-<#= checkedmodelSelectorCommonPart #>>
        </ng-template>
      </li> 
      <li ngbNavItem>
        <a ngbNavLink>Dashboards</a>
        <ng-template ngbNavContent>
            <app-<#= checkeddashboardSelectorCommonPart #> 
                [<#= MaxHeightPropSelector #>]="<#= MaxHeightPropName #>"  
                [<#= FilterMaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
                [<#= ShowFilterSelector #>]="<#= ShowFilterPropName #>"
                [<#= showAddFltItemSelector #>]="<#= showAddFltItemPropName #>"

                [<#= PermissionsSelector #>]="<#= PermissionsPropName #>"
                (<#= OutPermissionSelector #>)="<#= OutPermissionPropName #>($event)"
                [<#= containerMenuItemsSelector #>]="<#= saveRolePropName #>"
                (<#= onContainerMenuItemClickSelector #>)="<#= onSaveRoleMethodName #>($event)"
            ></app-<#= checkeddashboardSelectorCommonPart #>>
        </ng-template>
      </li> 
  </ul>
  <div [ngbNavOutlet]="nav"></div>
</div>

<#+
        ModelViewSerializable GetFirstModelViewByType(DbContextSerializable context, string fileType) {
            if ((context == null) || (string.IsNullOrEmpty(fileType))) {
                return null;
            }
            if (context.ModelViews == null) {
                return null;
            }
            return context.ModelViews.Where(v => v.CommonStaffs.Any(f =>f.FileType == fileType)).FirstOrDefault();
        }

        ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
            if ((context == null) || (string.IsNullOrEmpty(viewName))) {
                return null;
            }
            if (context.ModelViews == null) {
                return null;
            }
            return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        }
        string GetComponentSelectorCommonPart(CS2ANGULAR.Model.Serializable.ModelViewSerializable model, string fileType)
        {
            string result = "";
            if ((model == null) || string.IsNullOrEmpty(fileType))
            {
                return result;
            }
            if (model.CommonStaffs == null)
            {
                return result;
            }
            CommonStaffSerializable refItem =
                model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
            if (refItem == null)
            {
                return result;
            }
            if (string.IsNullOrEmpty(refItem.FileName))
            {
                return result;
            }
            return refItem.FileName.Replace(".component", "");
        }
        List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
        {
            if (result == null)
            {
                result = new List<string>();
            }
            if ((model == null) || (context == null))
            {
                return result;
            }
            if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if(primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewSerializable> details =
                context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
            if(details.Count < 1)
            {
                return result;
            }
            foreach(ModelViewSerializable detail in details)
            {
                if (detail.ScalarProperties == null) continue;
                if (detail.ForeignKeys == null) continue;
                if (detail.ForeignKeys.Count < 1) continue;
                List<ModelViewForeignKeySerializable> ForeignKeys =
                    detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
                if (ForeignKeys.Count < 1) continue;
                bool canBeUsed = false;
                foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
                {
                    bool hasForeignKeyProps = true;
                    if (ForeignKey.ForeignKeyProps != null)
                    {
                        for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                        {
                            ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                            if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                            {
                                hasForeignKeyProps = false;
                            }
                            if(!hasForeignKeyProps)
                            {
                                ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                                if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                                {
                                    hasForeignKeyProps = true;
                                } else
                                {
                                    break;
                                }
                            }
                        }
                    } else
                    {
                        hasForeignKeyProps = false;
                    }
                    if (hasForeignKeyProps)
                    {
                        canBeUsed = true;
                        break;
                    }
                }
                if(canBeUsed)
                {
                    if(!result.Contains(detail.ViewName))
                    {
                        result.Add(detail.ViewName);
                    }
                }
            }
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
            List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
            if (model == null)
            {
                return result;
            }
            if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
                return result;
            }
            foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
                ModelViewPropertyOfVwSerializable prop =
                    model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
                if(prop != null) {
                    result.Add(prop);
                } else {
                    if(model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                            if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                                for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                    if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                        if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                            prop =
                                            model.ScalarProperties.Where(p => 
                                                (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                                &&
                                                (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                            ).FirstOrDefault();
                                        }
                                    }
                                    if(prop != null) break;
                                }
                            }
                            if(prop != null) break;
                        }
                        if(prop != null) {
                            result.Add(prop);
                        }
                    }
                }
            }
            return result;
        }

#>
