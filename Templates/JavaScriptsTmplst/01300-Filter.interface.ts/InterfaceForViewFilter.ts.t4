<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2ANGULAR" #>
<#@ import namespace="CS2ANGULAR.Model" #>
<#@ import namespace="CS2ANGULAR.Model.Serializable" #>
<#@ parameter type="CS2ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string OperatorSufix = "Oprtr";
#>


export interface <#= GetInterfaceFilterName(Model) #> {
<#
    foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
        if (prop.IsUsedByfilter) {
#>
        <#= GetTypeScriptPropertyName(prop, Model)#> ?: Array< <#= GetPropertyTypeScriptTypeName(prop)#> >;
        <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> ?: Array< string >;
<#
        }
    }
#>
        orderby ?: string[];
        page ?: number;
        pagesize ?: number;
}


<#+

    string GetInterfaceFilterName(CS2ANGULAR.Model.Serializable.ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetInterfacePageName(CS2ANGULAR.Model.Serializable.ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceName(CS2ANGULAR.Model.Serializable.ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetPropertyTypeScriptTypeName(CS2ANGULAR.Model.Serializable.ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetPropertyTypeName(CS2ANGULAR.Model.Serializable.ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(CS2ANGULAR.Model.Serializable.ModelViewPropertyOfVwSerializable prop, CS2ANGULAR.Model.Serializable.ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(CS2ANGULAR.Model.Serializable.ModelViewPropertyOfVwSerializable prop, CS2ANGULAR.Model.Serializable.ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }

#>