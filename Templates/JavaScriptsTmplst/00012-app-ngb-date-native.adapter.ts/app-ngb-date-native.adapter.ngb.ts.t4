<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2ANGULAR" #>
<#@ import namespace="CS2ANGULAR.Model" #>
<#@ import namespace="CS2ANGULAR.Model.Serializable" #>
<#@ parameter type="CS2ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string appNgbDateNativeAdapterFolder    = "00012-app-ngb-date-native.adapter.ts";
    string appNgbDateNativeAdapterClassName = GetAdapterClassName(Model, appNgbDateNativeAdapterFolder);

#>


import {  Injectable } from '@angular/core';
import { NgbDateAdapter, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';

// begin reminder: include in app.module.ts
// 
//  providers: [
//    {
//      provide: NgbDateAdapter, 
//      useClass: AppNgbDateNativeAdapter
//    }
// ],
// end reminder 


@Injectable()
export class <#= appNgbDateNativeAdapterClassName #> extends NgbDateAdapter<Date> {

    fromModel(date: Date): NgbDateStruct|null {
        if(typeof date === 'undefined') return null;
        if(date === null) return null;
        var dt = new Date(date);
        return dt ? {year: dt.getFullYear(), month: dt.getMonth() + 1, day: dt.getDate() || 1} : null;
    }

    toModel(date: NgbDateStruct): Date|null {
        return date ? new Date(date.year, date.month - 1, date.day, 0, 0, 0) : null;
    }
}



<#+
    string GetAdapterClassName(CS2ANGULAR.Model.Serializable.ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".adapter","Adapter");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
#>